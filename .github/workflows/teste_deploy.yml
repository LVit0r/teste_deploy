name: CI teste-deploy-django

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_REPO }}  # Ex: usuario/repositorio

jobs:
  ci-and-publish:
    runs-on: ubuntu-latest
    environment: TESTE DEPLOY

    permissions:
      contents: write  # necess√°rio para criar novas tags
      packages: write

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # precisa puxar todas as tags para funcionar corretamente

      # 2Ô∏è‚É£ Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3Ô∏è‚É£ Instalar depend√™ncias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4Ô∏è‚É£ Gerar e subir nova tag automaticamente
      #    Se o commit tiver "#patch" ou "#major", ele respeita.
      #    Caso contr√°rio, faz o bump padr√£o "minor".
      - name: Bump version and push new tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor   # üëà padr√£o definido como minor
          tag_prefix: v

      # 5Ô∏è‚É£ Logar no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 6Ô∏è‚É£ Build e push da imagem Docker com as tags geradas
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.tag_version.outputs.new_tag }}
            