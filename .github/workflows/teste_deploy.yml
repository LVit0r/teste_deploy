name: CI TESTE DEPLOY DJANGO

on:
  push:
    branches:
      - main
      - HML
      - DEV

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_REPO }}

permissions:
  contents: write
  packages: write

jobs:

  build-base:
    runs-on: ubuntu-latest
    name: Preparar ambiente base
    outputs:
      branch: ${{ steps.get_branch.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get current branch
        id: get_branch
        run: |
          echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

  build-dev:
    needs: build-base
    if: needs.build-base.outputs.branch == 'DEV'
    runs-on: ubuntu-latest
    environment: TESTE DEPLOY
    name: Build e Push DEV
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push DEV image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:dev-${{ github.run_id }}
            ${{ env.DOCKER_IMAGE }}:dev

  build-hml:
    needs: build-base
    if: needs.build-base.outputs.branch == 'HML'
    runs-on: ubuntu-latest
    environment: TESTE DEPLOY
    name: Build e Push HML
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push HML image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:hml-${{ github.run_id }}
            ${{ env.DOCKER_IMAGE }}:hml

  build-prod:
    needs: build-base
    if: needs.build-base.outputs.branch == 'main'
    runs-on: ubuntu-latest
    environment: TESTE DEPLOY
    name: Build e Push Produção
    steps:
      - name: Detect bump type
        id: bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Último commit: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"#major"* ]]; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif [[ "$COMMIT_MSG" == *"#patch"* ]]; then
            echo "BUMP=patch" >> $GITHUB_ENV
          else
            echo "BUMP=minor" >> $GITHUB_ENV
          fi

      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ env.BUMP }}
          tag_prefix: v

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Prod image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.tag_version.outputs.new_tag }}
            ${{ env.DOCKER_IMAGE }}:latest